#include <stdio.h>
#include <stdlib.h>  //Биоблиотека для рандома
#include <unistd.h>  // Библиотека для паузы

#define heigth 80
#define width 25

void field(int board[width][heigth]);
void show(int board[width][heigth]);
void copy(int board[width][heigth], int newboard[width][heigth]);
void step(int board[width][heigth], int newboard[width][heigth]);

int main() {
    int board[width][heigth];
    int newboard[width][heigth];

    field(board);

    for (int k = 0; k < 10000; k++) {
        show(board);
        step(board, newboard);
        sleep(3);
        system("clear");
    }
    return 0;
}

int get_x(int i) { return (width + i) % width; }
int get_y(int j) { return (heigth + j) % heigth; }

void field(int board[width][heigth]) {
    char ch;
    for (int i = 0; i < width; i++) {
        for (int j = 0; j < heigth; j++) {
            scanf("%c", &ch);
            if (ch == '0' || ch == '1') {
                board[i][j] = (int)ch - '0';
            } else {
                j--;
            }
        }
    }
}
void show(int board[width][heigth]) {
    for (int i = 0; i < width; i++) {
        for (int j = 0; j < heigth; j++) {
            if (board[i][j] == 1) {
                printf("*");
            } else {
                printf(" ");
            }
        }
        printf("\n");
    }
}

void copy(int board[width][heigth], int newboard[width][heigth]) {
    for (int i = 0; i < width; i++) {
        for (int j = 0; j < heigth; j++) {
            newboard[i][j] = board[i][j];
        }
    }
}
void step(int board[width][heigth], int newboard[width][heigth]) {
    copy(board, newboard);
    for (int i = 0; i < width; ++i) {
        for (int j = 0; j < heigth; ++j) {
            int count = 0;
            count += newboard[get_x(i - 1)][get_y(j - 1)];
            count += newboard[get_x(i - 1)][get_y(j)];
            count += newboard[get_x(i - 1)][get_y(j + 1)];
            count += newboard[get_x(i)][get_y(j - 1)];
            count += newboard[get_x(i)][get_y(j + 1)];
            count += newboard[get_x(i + 1)][get_y(j - 1)];
            count += newboard[get_x(i + 1)][get_y(j)];
            count += newboard[get_x(i + 1)][get_y(j + 1)];

            if ((newboard[i][j] == 0) && count == 3) {
                board[i][j] = 1;
            } else if (((newboard[i][j] == 1) && (count == 2)) || (count == 3)) {
                board[i][j] = 1;
            } else if ((newboard[i][j] < 2) || (count > 3)) {
                board[i][j] = 0;
            }
        }
    }
}
